
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	СформироватьДвиженияОсновныеНачисления();
	Движения.ВКМ_ОсновныеНачисления.Записать();
	
	РассчитатьОклад();
	
	РассчитатьОтпуск();
	
	РассчитатьВзаиморасчетыССотрудниками();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//@skip-check module-structure-method-in-regions
Процедура СформироватьДвиженияОсновныеНачисления()
	
	Для Каждого Строка Из ОсновныеНачисления Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.ГрафикРаботы = Строка.ГрафикРаботы;
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -1));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
Процедура РассчитатьОклад();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочихДнейПериодДействия, 0) КАК План,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.РабочихДнейФактическийПериодДействия, 0) КАК Факт,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТ_Отработано
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|			Регистратор = &Ссылка
		|				И ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВКМ_ОсновныеНачисления.Оклад)) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Отработано.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(ВКМ_УсловияОплатыСотрудников.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ДатыОкладов
		|ИЗ
		|	ВТ_Отработано КАК ВТ_Отработано
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
		|		ПО ВТ_Отработано.Сотрудник = ВКМ_УсловияОплатыСотрудников.Сотрудник
		|			И (ВКМ_УсловияОплатыСотрудников.Период <= ВТ_Отработано.ПериодДействия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Отработано.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Отработано.НомерСтроки КАК НомерСтроки,
		|	ВТ_Отработано.Сотрудник КАК Сотрудник,
		|	ВТ_Отработано.План КАК План,
		|	ВТ_Отработано.Факт КАК Факт,
		|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудников.Оклад, 0) КАК Показатель,
		|	ВТ_Отработано.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТ_РасчетПоОкладу
		|ИЗ
		|	ВТ_Отработано КАК ВТ_Отработано
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыОкладов КАК ВТ_ДатыОкладов
		|		ПО ВТ_Отработано.НомерСтроки = ВТ_ДатыОкладов.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
		|		ПО ВТ_Отработано.Сотрудник = ВКМ_УсловияОплатыСотрудников.Сотрудник
		|			И (ВТ_ДатыОкладов.Период = ВКМ_УсловияОплатыСотрудников.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РасчетПоОкладу.НомерСтроки КАК НомерСтроки,
		|	ВТ_РасчетПоОкладу.Сотрудник КАК Сотрудник,
		|	ВТ_РасчетПоОкладу.План КАК План,
		|	ВТ_РасчетПоОкладу.Факт КАК Факт,
		|	ВТ_РасчетПоОкладу.Показатель КАК Показатель,
		|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеСотрудникомРаботы.СуммаКОплате, 0)) КАК СуммаКОплате
		|ИЗ
		|	ВТ_РасчетПоОкладу КАК ВТ_РасчетПоОкладу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы КАК ВКМ_ВыполненныеСотрудникомРаботы
		|		ПО ВТ_РасчетПоОкладу.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботы.Сотрудник
		|			И (ВКМ_ВыполненныеСотрудникомРаботы.Период МЕЖДУ НАЧАЛОПЕРИОДА(ВТ_РасчетПоОкладу.ПериодДействия, МЕСЯЦ) И КОНЕЦПЕРИОДА(ВТ_РасчетПоОкладу.ПериодДействия, МЕСЯЦ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РасчетПоОкладу.Сотрудник,
		|	ВТ_РасчетПоОкладу.План,
		|	ВТ_РасчетПоОкладу.Факт,
		|	ВТ_РасчетПоОкладу.Показатель,
		|	ВТ_РасчетПоОкладу.НомерСтроки";  
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Движение.Показатель = Выборка.Показатель;
		Движение.ОтработаноДней = Выборка.Факт;
		
		Если Выборка.План = 0 Тогда
			Движение.Результат = 0;
		Иначе
			Движение.Результат = Выборка.Показатель / Выборка.План * Выборка.Факт + Выборка.СуммаКОплате;  
			НДФЛОтРезультата = Движение.Результат * 13/100; 
		КонецЕсли;
		
			ДвижениеУдержания = Движения.ВКМ_Удержания.Добавить();
			ДвижениеУдержания.ПериодРегистрации = Дата;
			ДвижениеУдержания.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
			ДвижениеУдержания.Сотрудник = Выборка.Сотрудник;
			ДвижениеУдержания.Результат = НДФЛОтРезультата;
			
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);	 
	
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
Процедура РассчитатьОтпуск()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК БазаДоп,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК БазаОсн,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ОтработаноДнейБаза, 0) КАК ОтработаноДнейБаза,
		|	РАЗНОСТЬДАТ(ВКМ_ОсновныеНачисления.ПериодДействияНачало, ВКМ_ОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) + 1 КАК ДнейОтпуска
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = &Отпуск";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	Запрос.УстановитьПараметр("Измерения", Измерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Если Выборка.ОтработаноДнейБаза = 0 Тогда
			Движение.Результат = 0;
		Иначе
			Движение.Результат = (Выборка.БазаОсн + Выборка.БазаДоп) / Выборка.ОтработаноДнейБаза * Выборка.ДнейОтпуска;
			НДФЛОтРезультата = Движение.Результат * 13/100;
		КонецЕсли;
		
		ДвижениеУдержания = Движения.ВКМ_Удержания.Добавить();
		ДвижениеУдержания.ПериодРегистрации = Дата;
		ДвижениеУдержания.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		ДвижениеУдержания.Сотрудник = Выборка.Сотрудник;
		ДвижениеУдержания.Результат = НДФЛОтРезультата;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
Процедура РассчитатьВзаиморасчетыССотрудниками();

	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	СУММА(ВКМ_ОсновныеНачисления.Результат) КАК Начисления
		|ПОМЕСТИТЬ ВТ_ОснНач
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОсновныеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_Удержания.Сотрудник КАК Сотрудник,
		|	СУММА(ВКМ_Удержания.Результат) КАК Удержания
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
		|ГДЕ
		|	ВКМ_Удержания.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_Удержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОснНач.Сотрудник КАК Сотрудник,
		|	ВТ_ОснНач.Начисления КАК Начисления,
		|	ВТ_Удержания.Удержания КАК Удержания
		|ИЗ
		|	ВТ_ОснНач КАК ВТ_ОснНач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Удержания КАК ВТ_Удержания
		|		ПО ВТ_ОснНач.Сотрудник = ВТ_Удержания.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.Сумма = Выборка.Начисления - Выборка.Удержания;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
